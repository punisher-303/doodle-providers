"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStream=getStream;const headers={Accept:"text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7","Cache-Control":"no-store","Accept-Language":"en-US,en;q=0.9",DNT:"1","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"};async function safeGet(axios,url,opts={}){try{return await axios.get(url,{headers:headers,...opts})}catch(err){try{return await axios.get(url,{headers:{...headers,"User-Agent":"curl/7.88.1"},...opts})}catch(err2){throw err2}}}async function getStream({link:link,type:type,signal:signal,providerContext:providerContext}){const{axios:axios,cheerio:cheerio,extractors:extractors}=providerContext,{hubcloudExtracter:hubcloudExtracter}=extractors,streamLinks=[];try{let res=await safeGet(axios,link,{signal:signal,responseType:"text"}),$=cheerio.load(res.data||"");$("a[href*='pixeldrain.dev/api/file/']").each((_,el)=>{var _a;const href=null===(_a=$(el).attr("href"))||void 0===_a?void 0:_a.trim();href&&streamLinks.push({server:"pixeldrain",link:href,type:"mp4"})});try{const hubcloudStreams=await hubcloudExtracter(link,signal);Array.isArray(hubcloudStreams)&&hubcloudStreams.length>0&&streamLinks.push(...hubcloudStreams)}catch(e){}const instantCandidates=[];$("a[href]").each((_,el)=>{const href=($(el).attr("href")||"").trim(),text=($(el).text()||"").trim().toLowerCase();href&&(href.includes("gdlink.dev")||href.includes("gdflix")||href.includes("instant.busycdn")||href.includes("instant-")||text.includes("instant dl")||text.includes("instant dl")||text.includes("instant download")||href.includes("gdtot")||href.includes("gdriveplayer"))&&instantCandidates.push(href)});const pageText=$.html(),instantRegex=/(https?:\/\/(?:instant|busycdn|instant\.busycdn|gdlink|gdflix)[^\s"'<>]+)/gi;(pageText.match(instantRegex)||[]).forEach(m=>instantCandidates.push(m));const uniqueInstantCandidates=Array.from(new Set(instantCandidates)).slice(0,10);for(const instantUrl of uniqueInstantCandidates)try{const instRes=await safeGet(axios,instantUrl,{signal:signal,responseType:"text",headers:{...headers,Referer:link}}),_$=cheerio.load(instRes.data||""),downloadPageCandidates=[];_$("a[href]").each((_,el)=>{const href=(_$(el).attr("href")||"").trim(),text=(_$(el).text()||"").trim().toLowerCase();href&&(href.includes("gdlink.dev")||href.includes("gdtot")||href.includes("gdrive")||href.includes("googleusercontent")||text.includes("download")||text.includes("get link")||text.includes("direct dl")||href.includes("instant"))&&downloadPageCandidates.push(href)}),_$("button[onclick], a[onclick]").each((_,el)=>{const m=(_$(el).attr("onclick")||"").trim().match(/(https?:\/\/[^\s'"]+)/i);m&&m[1]&&downloadPageCandidates.push(m[1])});const instText=_$.html()||"",downloadRegex=/(https?:\/\/(?:gdlink\.dev|gdtot\.|gdriveplayer|drive\.googleusercontent|video-downloads\.googleusercontent|instant\.[^\s"'<>]+)[^\s"'<>]+)/gi;(instText.match(downloadRegex)||[]).forEach(m=>downloadPageCandidates.push(m));const uniqueDownloadCandidates=Array.from(new Set(downloadPageCandidates)).slice(0,10);for(const dlPage of uniqueDownloadCandidates)try{const dlRes=await safeGet(axios,dlPage,{signal:signal,responseType:"text",headers:{...headers,Referer:instantUrl}}),$$$=cheerio.load(dlRes.data||"");$$$("a[href*='video-downloads.googleusercontent.com'], a[href*='drive.google.com']").each((_,el)=>{const href=($$$(el).attr("href")||"").trim();href&&streamLinks.push({server:"gdflix",link:href,type:"mp4"})}),$$$("a[href*='pixeldrain.dev/api/file/']").each((_,el)=>{const href=($$$(el).attr("href")||"").trim();href&&streamLinks.push({server:"pixeldrain",link:href,type:"mp4"})});const dlPageText=$$$.html()||"",finalRegex=/(https?:\/\/video-downloads\.googleusercontent\.com\/[^\s"'<>]+)/gi;(dlPageText.match(finalRegex)||[]).forEach(m=>streamLinks.push({server:"gdflix",link:m,type:"mp4"}));const hlsRegex=/(https?:\/\/[^\s"'<>]+\.m3u8)/gi;(dlPageText.match(hlsRegex)||[]).forEach(m=>streamLinks.push({server:"hls",link:m,type:"hls"}))}catch(errDl){continue}}catch(errInst){continue}if(!streamLinks.some(s=>"gdflix"===s.server)){const bodyText=$.html()||"",finalRegex2=/(https?:\/\/video-downloads\.googleusercontent\.com\/[^\s"'<>]+)/gi;(bodyText.match(finalRegex2)||[]).forEach(m=>streamLinks.push({server:"gdflix",link:m,type:"mp4"}))}return Array.from(new Map(streamLinks.map(s=>[s.link,s])).values())}catch(error){return streamLinks}}