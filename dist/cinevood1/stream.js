"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getStream=getStream;const DEFAULT_HEADERS={Accept:"application/json, text/html, */*","Content-Type":"application/json","User-Agent":"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36"};function normalizeUrl(base,href){if(!href)return href;if(href.startsWith("http://")||href.startsWith("https://"))return href;try{return new URL(href,base).href}catch(_a){return href}}async function fetchJsonOrText(url,providerContext,signal){const{axios:axios}=providerContext;return(await axios.get(url,{headers:DEFAULT_HEADERS,signal:signal})).data}async function extractFromOxxApi(apiUrl,providerContext,signal){const streams=[];try{const data=await fetchJsonOrText(apiUrl,providerContext,signal);if("object"==typeof data&&(data.url&&streams.push({server:"oxxfile",link:data.url,type:"movie"}),Array.isArray(data.links)&&data.links.forEach(l=>(null==l?void 0:l.url)&&streams.push({server:"oxxfile",link:l.url,type:l.type||"movie"})),data.data&&"object"==typeof data.data&&(data.data.url&&streams.push({server:"oxxfile",link:data.data.url,type:data.data.type||"movie"}),Array.isArray(data.data.links)&&data.data.links.forEach(l=>(null==l?void 0:l.url)&&streams.push({server:"oxxfile",link:l.url,type:l.type||"movie"}))),Object.values(data).forEach(v=>{"string"==typeof v&&v.includes("hubcloud")&&streams.push({server:"oxxfile",link:v,type:"movie"}),Array.isArray(v)&&v.forEach(it=>{"string"==typeof it&&it.includes("hubcloud")&&streams.push({server:"oxxfile",link:it,type:"movie"})})})),"string"==typeof data){const regex=/https?:\/\/[^\s"'<>]+(?:hubcloud|oxxfile|multiup|drive)[^\s"'<>]*/gi;(data.match(regex)||[]).forEach(m=>streams.push({server:"oxxfile",link:m,type:"movie"}))}}catch(_a){}return streams}async function extractFromHubCloudPage(hubUrl,providerContext,signal){const streams=[],{axios:axios,cheerio:cheerio}=providerContext;try{const html=(await axios.get(hubUrl,{headers:DEFAULT_HEADERS,signal:signal})).data,$=cheerio.load("string"==typeof html?html:String(html));$("a,button").each((_,el)=>{const href=$(el).attr("href")||$(el).attr("data-href")||$(el).attr("data-url")||"",text=($(el).text()||"").toLowerCase(),candidate=href||text;if(/hubcloud|download|\.mkv|\.mp4|drive|filepress|multiup|oxxfile/i.test(candidate)){const url=href?normalizeUrl(hubUrl,href):candidate;streams.push({server:"hubcloud",link:url,type:"movie"})}}),$("script").each((_,s)=>{(($(s).html()||"").match(/https?:\/\/[^\s"'<>]+(?:download|hubcloud|oxxfile|multiup|drive|filepress)[^\s"'<>]*/gi)||[]).forEach(m=>streams.push({server:"hubcloud",link:m,type:"movie"}))})}catch(_a){}return streams}async function genericPageScan(url,providerContext,signal){const streams=[],{axios:axios}=providerContext;try{const html=(await axios.get(url,{headers:DEFAULT_HEADERS,signal:signal})).data,regex=/https?:\/\/[^\s"'<>]+(?:oxxfile|multiup|hubcloud|drive|filepress|dropbox|googleusercontent|mp4|mkv)[^\s"'<>]*/gi;(("string"==typeof html?html:JSON.stringify(html)).match(regex)||[]).forEach(m=>streams.push({server:"generic",link:m,type:"movie"}))}catch(_a){}return streams}async function getStream({link:link,type:type,signal:signal,providerContext:providerContext}){var _a;let streams=[];try{if(/oxxfile\.info\/s\/([^/]+)/i.test(link)){const id=null===(_a=link.match(/oxxfile\.info\/s\/([^/]+)/i))||void 0===_a?void 0:_a[1];if(id){const apiVariants=[`https://new3.oxxfile.info/api/s/${id}/api`,`https://new3.oxxfile.info/api/s/${id}/hubcloud`,`https://new3.oxxfile.info/api/s/${id}`];for(const apiUrl of apiVariants){const oxStreams=await extractFromOxxApi(apiUrl,providerContext,signal);if(oxStreams.length){oxStreams.forEach(s=>streams.push(s));const hubLinks=oxStreams.map(s=>s.link).filter(l=>/hubcloud/i.test(l));for(const h of hubLinks){(await extractFromHubCloudPage(h,providerContext,signal)).forEach(s=>streams.push(s))}if(streams.length)break}}}}if(/oxxfile\.info\/api\/s\/[^/]+/i.test(link)||/oxxfile\.info\/api\/s\/[^/]+\/hubcloud/i.test(link)){const oxStreams=await extractFromOxxApi(link,providerContext,signal);oxStreams.forEach(s=>streams.push(s));const hubLinks=oxStreams.map(s=>s.link).filter(l=>/hubcloud/i.test(l));for(const h of hubLinks){(await extractFromHubCloudPage(h,providerContext,signal)).forEach(s=>streams.push(s))}}if(/hubcloud\.one\/drive\/[^/]+/i.test(link)){(await extractFromHubCloudPage(link,providerContext,signal)).forEach(s=>streams.push(s))}(await genericPageScan(link,providerContext,signal)).forEach(s=>streams.push(s));return streams.filter(s=>"hubcloud"===s.server).slice(-3)}catch(_b){return streams.filter(s=>"hubcloud"===s.server).slice(-3)}}